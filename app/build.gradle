apply plugin: 'com.android.application'

def releasaTime(){
    return new Date().from("yyyy-MM-dd" , TimeZone.getTimeZone("UTC"));
}

android {
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    lintOptions {
        abortOnError false
    }

    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "ezviz.ezopensdk"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 11
        versionName "1.6.5"
        ndk {
            abiFilters "armeabi-v7a"
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "d7dcbc60f6f4da800a89ead8", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
        ]
        multiDexEnabled true
        //启用renderscript
        renderscriptTargetApi = 18
        renderscriptSupportModeEnabled = true
    }

    buildTypes {
        release {
            // 混淆
            minifyEnabled false
            shrinkResources false
            // 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

android.applicationVariants.all{variant ->
    variant.outputs.all { output ->
        def date = new Date().format("MM_dd_hh_mm", TimeZone.getTimeZone("GMT+08"))
        if (variant.buildType.name == "debug") {
            output.outputFileName = "arbitrator_v${android.defaultConfig.versionCode}_debug_${android.defaultConfig.versionName}_${date}.apk"
        } else if (variant.buildType.name == "release") {
            output.outputFileName = "arbitrator_v${android.defaultConfig.versionCode}_${android.defaultConfig.versionName}_${date}.apk"
        }
    }
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.0'
    implementation files('libs/BaiduLBS_Android.jar')
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'cn.qqtheme.framework:FilePicker:latest.release'
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.bigkoo:convenientbanner:2.0.5'
    implementation files('libs/dom4j-1.6.1.jar')
    implementation 'org.jsoup:jsoup:1.9.2'
    implementation 'com.github.chrisbanes.photoview:library:+'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation files('libs/arcgis-android-api.jar')
    implementation files('libs/jcifs-1.3.17.jar')
    implementation files('libs/jcore-android-2.1.6.jar')
    implementation files('libs/jpush-android-3.3.6.jar')
    implementation files('libs/jaxen-1.1.3.jar')
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0'
    implementation files('libs/commons-net-3.3.jar')
    implementation 'org.apache.httpcomponents:httpclient:4.5'
    implementation 'com.github.lzyzsd:circleprogress:1.2.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'
    implementation files('libs/jtds-1.2.7.jar')
}
